type Query{
	users(query:String):[User!]!
	posts(query:String): [Post]!
	comments:[Comment!]!
}
type Mutation{
	createUser(data:CreateUserInput!):User!
	createPost(data:CreatePostInput!):Post!
	createComment(data:CreateCommentInput!):Comment!
	deleteUser(id:ID!):User!
	deletePost(id:ID!):Post!
	deleteComment(id:ID!):Comment!
	updateUser(id:ID!,data:UpdateUserInput!):User!
	updatePost(id:ID!,data:UpdatePostInput!):Post!
	updateComment(id:ID!,data:UpdateCommentInput!):Comment!
}
type Subscription{
	somethingChanged: Int!
	comment(postId:ID!):Comment!
	post:Post!
}

input UpdateCommentInput{
	text: String
}
input UpdatePostInput{
	title:String
	body:String
	published:Boolean
}
input UpdateUserInput{
	name:String
	email:String
	age:Int
}
input CreateUserInput{
	name:String!
	email:String!
	age:Int
}
input CreatePostInput{
	title:String!
	body:String!
	published:Boolean!
	author:ID!
}
input CreateCommentInput{
	text:String!
	author:ID!
	post:ID!
}
type User{
	id:ID!
	name:String!
	email:String!
	age:Int
	posts:[Post]!
	comments:[Comment!]!
}
type Post{
	id:ID!
	title:String!
	body:String!
	published:Boolean!
	author:User!
	comments:[Comment]!
}
type Comment{
	id:ID!
	text: String!
	author:User!
	post:Post!
}